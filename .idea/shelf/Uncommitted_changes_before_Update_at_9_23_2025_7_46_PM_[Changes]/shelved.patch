Index: src/binarySearch/searchRotedArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package binarySearch;\r\npublic class searchRotedArray {\r\n    public static void main(String[] args) {\r\n        \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/binarySearch/searchRotedArray.java b/src/binarySearch/searchRotedArray.java
--- a/src/binarySearch/searchRotedArray.java	(revision e77da5590c2574421cd4c5a9fd3ebfdada49dd00)
+++ b/src/binarySearch/searchRotedArray.java	(date 1758558398804)
@@ -1,6 +1,40 @@
-package binarySearch;
-public class searchRotedArray {
+class Solution {
+    public int search(int[] nums, int target) {
+        int lo = 0, hi = nums.length - 1;
+
+        while (lo <= hi) {
+            int mid = lo + (hi - lo) / 2;
+
+            if (nums[mid] == target) return mid;
+
+            // Right half is sorted
+            if (nums[mid] <= nums[hi]) {
+                if (target > nums[mid] && target <= nums[hi]) {
+                    lo = mid + 1;
+                } else {
+                    hi = mid - 1;
+                }
+            }
+            // Left half is sorted
+            else {
+                if (target >= nums[lo] && target < nums[mid]) {
+                    hi = mid - 1;
+                } else {
+                    lo = mid + 1;
+                }
+            }
+        }
+        return -1;
+    }
+
     public static void main(String[] args) {
-        
+        Solution sol = new Solution();
+
+        int[] nums1 = {4,5,6,7,0,1,2};
+        System.out.println(sol.search(nums1, 0)); // Output: 4
+        System.out.println(sol.search(nums1, 3)); // Output: -1
+
+        int[] nums2 = {1};
+        System.out.println(sol.search(nums2, 0)); // Output: -1
     }
 }
Index: src/binarySearch/findUpperBond.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package binarySearch;\r\n\r\npublic class findUpperBond {\r\n    public static void main(String[] args) {\r\n        int []arr = {10,20,30,30,40,50};\r\n        int n = arr.length;\r\n        int lo=0,hi=n-1,up=n;\r\n        int target = 30;  // for element 30 upper bond  is 40 at index 4\r\n        while(lo<=hi){\r\n            int mid = lo+(hi-lo)/2;\r\n            if(arr[mid]>target){\r\n                up=Math.min(up,mid);\r\n                hi=mid-1;\r\n            }\r\n            else lo = mid+1;\r\n        }\r\n        System.out.println(up);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/binarySearch/findUpperBond.java b/src/binarySearch/findUpperBond.java
--- a/src/binarySearch/findUpperBond.java	(revision e77da5590c2574421cd4c5a9fd3ebfdada49dd00)
+++ b/src/binarySearch/findUpperBond.java	(date 1758549178527)
@@ -2,10 +2,10 @@
 
 public class findUpperBond {
     public static void main(String[] args) {
-        int []arr = {10,20,30,30,40,50};
+        int []arr = {10,20,30,30,40,40,50};
         int n = arr.length;
         int lo=0,hi=n-1,up=n;
-        int target = 30;  // for element 30 upper bond  is 40 at index 4
+        int target = 35;  // for element 30 upper bond  is 40 at index 4
         while(lo<=hi){
             int mid = lo+(hi-lo)/2;
             if(arr[mid]>target){
